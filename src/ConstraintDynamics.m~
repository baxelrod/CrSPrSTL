classdef ConstraintDynamics < handle 
    
    properties
        c
    end
    
    methods
        function self = ConstraintDynamics(c)
            self.c = c;
        end


        function result = x_next(self, dt, x0, u0, t0)
            Sum().minimize([T0])
            [f0, A, Bu, g0, C, Du] = self.linear_approximation(x0, u0, t0);
            sysc = ss(A, [Bu f0], C, [Du g0]);
            sysd = c2d(sysc, dt);
            result = x0+sysd.B*[u0-u0; 1];
        end
        function dynamics = local_dynamics(self, dt, x0, u0, t0, x, u, y)
            if any(isnan(x0))
                x0 = zeros(size(x0));
            end
            if any(isnan(u0))
                u0 = zeros(size(u0));
            end
            if isnan(t0)
                t0 = 0.;
            end
            [f0, A, Bu, g0, C, Du] = self.linear_approximation(x0, u0, t0);
            sysc = ss(A, [Bu f0], C, [Du g0]);
            sysd = c2d(sysc, dt);
            p1 = P(@(t, dt) x(t+dt)==x0+sysd.A*(x(t)-x0)+sysd.B*[u(t)-u0; 1]);
            if ~isempty(g0)
                p2 = P(@(t, dt) y(t)==g0+sysd.C*(x(t)-x0)+sysd.D*[u(t)-u0; 1]);
                dynamics = p1&p2;
            else
                dynamics = p1;
            end
        end
    end
end

